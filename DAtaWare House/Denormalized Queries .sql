-- de-normailzation for retrieve complete records with all relevant information in a single query.

ALTER TABLE FactSales
ADD StaffID INT; -- Assuming StaffID is an integer type



USE HypermarketDW;

UPDATE fs
SET fs.StaffID = s.staff_id
FROM dbo.FactSales fs
JOIN hypermarketDB.dbo.staff_store ss ON fs.StoreID = ss.store_id
JOIN hypermarketDB.dbo.staff s ON ss.staff_id = s.staff_id
WHERE fs.StoreID IS NOT NULL;



SELECT 
    fs.SalesID,
    fs.OrderID,
    fs.OrderDate,
    d.Year,         -- Ensure 'Year' and 'Month' exist in DimDate
    d.Month,
    s.StoreName,    -- Ensure 'StoreName' exists in DimStore
    c.CustomerName, -- Ensure 'CustomerName' exists in DimCustomer
    c.Address AS CustomerAddress,
    st.Name AS StaffName, -- Ensure 'Name' exists in DimStaff
    p.ProductName,  -- Ensure 'ProductName' exists in DimProduct
    p.Category,     -- Ensure 'Category' exists in DimProduct
    fs.Quantity,
    fs.Price,
    fs.TotalAmount
FROM 
    FactSales AS fs
JOIN 
    DimDate AS d ON fs.DateKey = d.DateKey
JOIN 
    DimStore AS s ON fs.StoreID = s.StoreID
JOIN 
    DimCustomer AS c ON fs.CustomerID = c.CustomerID
JOIN 
    DimStaff AS st ON fs.StaffID = st.StaffID
JOIN 
    DimProduct AS p ON fs.ProductID = p.ProductID;
----------------------------------------------------------------------------------------------------------------------------
--	2-Monthly Sales Summary:
--	This query aggregates sales data to provide a monthly summary, showing total sales and quantity sold per month.
SELECT 
    d.Year,
    d.Month,
    SUM(fs.TotalAmount) AS TotalSales,
    SUM(fs.Quantity) AS TotalQuantity
FROM 
    FactSales AS fs
JOIN 
    DimDate AS d ON fs.DateKey = d.DateKey
GROUP BY 
    d.Year, d.Month
ORDER BY 
    d.Year, d.Month;

-----------------------------------------------------------------------------------------
-- 3- Top 5 Products by Sales Amount
SELECT TOP 5
    p.ProductName,
    p.Category,
    SUM(fs.TotalAmount) AS TotalSales
FROM 
    FactSales AS fs
JOIN 
    DimProduct AS p ON fs.ProductID = p.ProductID
GROUP BY 
    p.ProductName, p.Category
ORDER BY 
    TotalSales DESC;

------------------------------------------------------------------------------------------------------
-- 4-Customer Purchase History
SELECT 
    c.CustomerName,
    c.Address AS CustomerAddress,
    SUM(fs.TotalAmount) AS TotalSpent
FROM 
    FactSales AS fs
JOIN 
    DimCustomer AS c ON fs.CustomerID = c.CustomerID
GROUP BY 
    c.CustomerName, c.Address
ORDER BY 
    TotalSpent DESC;

----------------------------------------------------------------------------------------------------------
-- 5- Sales by Store and Category
SELECT 
    s.StoreName,
    p.Category,
    SUM(fs.TotalAmount) AS CategorySales
FROM 
    FactSales AS fs
JOIN 
    DimStore AS s ON fs.StoreID = s.StoreID
JOIN 
    DimProduct AS p ON fs.ProductID = p.ProductID
GROUP BY 
    s.StoreName, p.Category
ORDER BY 
    s.StoreName, CategorySales DESC;
------------------------------------------------------------------------------------------------------------
-- 6-Sales Growth Over Time
--This query calculates the monthly growth in sales by showing the difference in sales from one month to the next.
SELECT 
    d.Year,
    d.Month,
    SUM(fs.TotalAmount) AS MonthlySales,
    LAG(SUM(fs.TotalAmount), 1) OVER (ORDER BY d.Year, d.Month) AS PreviousMonthSales,
    SUM(fs.TotalAmount) - LAG(SUM(fs.TotalAmount), 1) OVER (ORDER BY d.Year, d.Month) AS Growth
FROM 
    FactSales AS fs
JOIN 
    DimDate AS d ON fs.DateKey = d.DateKey
GROUP BY 
    d.Year, d.Month
ORDER BY 
    d.Year, d.Month;


------------------------------------------------------------------------------------------------------------
-- 7-  Staff Performance Analysis
-- This query calculates the total sales amount generated by each staff member, showing their name and the total amount of sales they facilitated.

SELECT 
    st.Name AS StaffName,
    SUM(fs.TotalAmount) AS TotalSales
FROM 
    FactSales AS fs
JOIN 
    DimStaff AS st ON fs.StaffID = st.StaffID
GROUP BY 
    st.Name
ORDER BY 
    TotalSales DESC;



-----------------------------------------------------------------

-- this queries for test the cloumn missing or not 
USE HypermarketDW;
GO
SELECT COLUMN_NAME 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'FactSales';


USE hypermarketDB;
GO
SELECT COLUMN_NAME 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'staff_store';


USE hypermarketDB;
GO
SELECT COLUMN_NAME 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'staff';

USE hypermarketDB;
GO
SELECT COLUMN_NAME 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'staff';



-- Step: Create foreign key relationship between FactSales and DimStaff
ALTER TABLE FactSales
ADD CONSTRAINT FK_FactSales_DimStaff
FOREIGN KEY (StaffID) REFERENCES DimStaff(StaffID);



